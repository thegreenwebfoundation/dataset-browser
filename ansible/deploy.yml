---
- name: Deploy the TGWF dataset browser
  hosts:
    - all
  remote_user: "deploy"
  become: false

  vars:
    project_git_repo: "git@github.com:thegreenwebfoundation/dataset-browser.git"
    project_deploy_strategy: git
    project_version: "main"
    project_local_path: "../"
    project_unwanted_items:
      - .git
    project_finalize: true
    service_user: "deploy"
    supervisor_user: "deploy"
    install_system_dependencies: false
    install_python_dependencies: true
    check_site_available: false

  roles:
    - f500.project_deploy

  tasks:
    - name: Set up directory structure for project_deploys, and env files
      block:
        - name: Set up directory for deploying app
          ansible.builtin.file:
            path: "/var/www/{{ tgwf_domain_name }}.thegreenwebfoundation.org"
            state: directory
            mode: "0755"
            owner: deploy
            group: deploy
          become: true

        - name: Move .env file to shared directory
          ansible.builtin.template:
            src: "templates/dotenv.j2"
            dest: "{{ project_root }}/shared/.env"
            owner: deploy
            group: deploy
            mode: "0755"
          become: true

        - name: Link .env to shared directory
          ansible.builtin.file:
            src: "{{ project_root }}/shared/.env"
            dest: "{{ project_root }}/current/.env"
            state: link

    - name: Install required system dependencies
      when: install_system_dependencies is true
      block:
        - name: Make sure python is installed
          ansible.builtin.apt:
            pkg:
              - python3-venv
              - python3-dev
              - jq
            state: present
          become: true

    - name: Download uv install script
      ansible.builtin.get_url:
        url: "https://astral.sh/uv/install.sh"
        dest: "/tmp/uv.install.sh"
        mode: "0755"
      when: install_system_dependencies is true
      tags: [uv-install]

    - name: Install uv for managing python dependencies
      ansible.builtin.shell: "bash /tmp/uv.install.sh"
      args:
        creates: "/home/deploy/.cargo/bin/uv"
      when: install_system_dependencies is true
      tags: [uv-install]

    - name: Install required application dependencies
      ansible.builtin.command: "/home/deploy/.cargo/bin/uv sync" # noqa no-changed-when
      args:
        chdir: "{{ project_root }}/current"
      when: install_python_dependencies is true

    - name: Set up systemd service for datasette
      ansible.builtin.template:
        src: "systemd.dataset_browser.service.j2"
        dest: "/etc/systemd/system/dataset_browser.service"
        owner: deploy
        group: deploy
        mode: "0755"
      become: true
      tags:
        - systemd
        - config

    - name: Set up script for running app via systemd
      ansible.builtin.template:
        src: "run_dataset_browser.sh.j2"
        dest: "{{ project_root }}/current/run_dataset_browser.sh"
        owner: deploy
        group: deploy
        mode: "0755"
      become: true
      tags:
        - systemd
        - run_script

    - name: Setup script to periodically refresh datasets
      ansible.builtin.template:
        src: "refresh_datasets.sh.j2"
        dest: "{{project_root}}/current/refresh_datasets.sh"
        owner: deploy
        group: deploy
        mode: "0755"
      become: true
      tags: [crontab]

    - name: Setup cronjob to periodically refresh datasets
      ansible.builtin.cron:
        name: "every day at 5am refresh the datasets"
        state: "present"
        weekday: "*"
        hour: "5" # The database dump is taken at 1.30 am daily, so this is timed to take place after that ends.
        minute: "0"
        user: deploy
        job: "cd {{project_root}}/current && ./refresh_datasets.sh 2>&1 | logger -t refresh_datasets"
      tags: [crontab]

    - name: Reload systemd to pick up new changes
      ansible.builtin.systemd:
        daemon_reload: true
      become: true
      tags:
        - systemd
        - config

    - name: Check that website is serving requests on expected domains
      when: check_site_available is true
      ansible.builtin.uri:
        url: "https://{{ tgwf_domain_name }}.{{ item }}"
        return_content: true
        status_code: 200
        timeout: 5
      loop:
        - greenweb.org
        - thegreenwebfoundation.org
      tags:
        - smoke-test
        - config
